import crc

def test_crc8_autosar():
    data = bytes([0x11, 0x22, 0x44, 0x88])
    assert crc.crc(data, 8, 0x2F, 0xFF, 0xFF, False, False) == 0xD7
    assert crc.crc8(data, 0x2F, 0xFF, 0xFF, False, False) == 0xD7

def test_crc8_maxim_dow():
    data = bytes([0x11, 0x22, 0x44, 0x88])
    assert crc.crc(data, 8, 0x31, 0x00, 0x00, True, True) == 0x82
    assert crc.crc8(data, 0x31, 0x00, 0x00, True, True) == 0x82

def test_crc8_mifare_mad():
    data = bytes([0x11, 0x22, 0x44, 0x88])
    assert crc.crc(data, 8, 0x1D, 0xC7, 0x00, False, False) == 0xD7
    assert crc.crc8(data, 0x1D, 0xC7, 0x00, False, False) == 0xD7

def test_crc16_dect_x():
    data = bytes([0x11, 0x22, 0x44, 0x88])
    assert crc.crc(data, 16, 0x0589, 0x0000, 0x0000, False, False) == 0xDCBF
    assert crc.crc16(data, 0x0589, 0x0000, 0x0000, False, False) == 0xDCBF

def test_crc16_iso_iec_14443_3_a():
    data = bytes([0x11, 0x22, 0x44, 0x88])
    assert crc.crc(data, 16, 0x1021, 0xC6C6, 0x0000, True, True) == 0x16DF
    assert crc.crc16(data, 0x1021, 0xC6C6, 0x0000, True, True) == 0x16DF

def test_crc16_maxin_dow():
    data = bytes([0x11, 0x22, 0x44, 0x88])
    assert crc.crc(data, 16, 0x8005, 0x0000, 0xFFFF, True, True) == 0xAF69
    assert crc.crc16(data, 0x8005, 0x0000, 0xFFFF, True, True) == 0xAF69
    
def test_crc16_profibus():
    data = bytes([0x11, 0x22, 0x44, 0x88])
    assert crc.crc(data, 16, 0x1DCF, 0xFFFF, 0xFFFF, False, False) == 0x739D
    assert crc.crc16(data, 0x1DCF, 0xFFFF, 0xFFFF, False, False) == 0x739D

def test_crc32_autosar():
    data = bytes([0x11, 0x22, 0x44, 0x88])
    assert crc.crc(data, 32, 0xF4ACFB13, 0xFFFFFFFF, 0xFFFFFFFF, True, True) == 0x749DC2A3
    assert crc.crc32(data, 0xF4ACFB13, 0xFFFFFFFF, 0xFFFFFFFF, True, True) == 0x749DC2A3